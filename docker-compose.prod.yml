version: "3.7"

networks:
  kafka-net:
    name: kafka-net
    driver: bridge

services:
  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "2181:2181"

  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"

  db-app:
    image: darya2019/database-fleet
    networks:
      - kafka-net
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1
      POSTGRES_DB: postgres
    expose:
      - 5432
    ports:
      - "5433:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./src/main/resources/db/1_create_tables_DB.sql:/docker-entrypoint-initdb.d/1_create_tables_DB.sql
      - ./src/main/resources/db/2_populate_common_tables_DB.sql:/docker-entrypoint-initdb.d/2_populate_common_tables_DB.sql
      - ./src/main/resources/db/3_populate_tracks_DB.sql:/docker-entrypoint-initdb.d/3_populate_tracks_DB.sql
      - ./src/main/resources/db/postgres_public_vehicle_coordinates_1.sql:/docker-entrypoint-initdb.d/postgres_public_vehicle_coordinates_1.sql
      - ./src/main/resources/db/postgres_public_vehicle_coordinates_2.sql:/docker-entrypoint-initdb.d/postgres_public_vehicle_coordinates_2.sql
      - ./src/main/resources/db/postgres_public_vehicle_coordinates_3.sql:/docker-entrypoint-initdb.d/postgres_public_vehicle_coordinates_3.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  v-app:
    image: darya2019/vehicle-fleet-service
    networks:
      - kafka-net
    ports:
      - "8080:8080"
    expose:
      - 8080
    depends_on:
      - "db-app"
      - "kafka"

  generator-app:
    image: darya2019/coordinate-service
    networks:
      - kafka-net
    depends_on:
      - "kafka"

volumes:
  postgres: